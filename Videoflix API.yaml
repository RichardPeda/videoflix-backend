openapi: 3.0.3
info:
  title: Videoflix API
  version: 1.0.0
  description: This is the API for the corresponding Videoflix App
  contact:
    name: Richard Peda
    url: https://richard-peda.de
    email: contact@richard-peda.de
paths:
  /api/connection/:
    get:
      operationId: api_connection_retrieve
      description: |-
        Returns a test file used to verify connection or media access.

        This endpoint is typically used to test client-server connectivity or to validate media streaming functionality.
        It retrieves a predefined test file (with primary key 1) from the database and returns its serialized representation.

        Args:
            request (Request): GET request (authentication not required, unless enforced elsewhere).

        Returns:
            Response (JSON):
                - 200 OK:
                    A serialized representation of the test file.

        Notes:
            - This endpoint always retrieves the file with `pk=1`.
            - Useful for connection checks, media playback testing, or system diagnostics.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: api_login_create
      description: |-
        Authenticates a user and returns an authentication token that is used for further API requests.

        Args:
            request (auth.user): Only authenticated users

        Returns:
            JSON: Response with token, user id and email.
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/login-signup/:
    post:
      operationId: api_login_signup_create
      description: |-
        Checks whether a user with the given email exists in the system.

        This endpoint is used as a preliminary step for login or signup flows.
        It does not authenticate or register a user, but simply verifies existence based on the email.

        Args:
            request (Request): POST request with JSON body containing 'email' field.

        Returns:
            Response (JSON):
                - 200 OK:
                    If user exists:
                        {
                            "message": "user exists",
                            "email": "user@example.com"
                        }
                    If user does not exist:
                        {
                            "message": "user does not exist"
                        }
                - 400 Bad Request:
                    If 'email' is missing from the request:
                        {
                            "message": "wrong information"
                        }
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/movie-convert/{id}:
    get:
      operationId: api_movie_convert_retrieve
      description: |-
        Retrieves a single movie convertable by its ID.

        This endpoint returns detailed information about a specific movie convertable, identified by its primary key (ID).
        Each convertable represents a video that was uploaded and processed using FFmpeg.
        During processing, the video is converted and saved in multiple resolutions: 120p, 360p, 720p, and 1080p.

        Args:
            request (Request): Authenticated GET request with valid token.
            pk (int): Primary key (ID) of the movie convertable to retrieve.

        Returns:
            Response (JSON):
                - 200 OK:
                    A serialized representation of the requested movie convertable.
                - 404 Not Found:
                    If no convertable with the given ID exists.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/movie-progress/:
    get:
      operationId: api_movie_progress_retrieve
      description: |-
        Retrieves the movie watch progress for the authenticated user.

        This endpoint returns a list of progress entries that track how far the current user has watched each movie.
        It is useful for implementing resume/playback position features in a video platform.

        Args:
            request (Request): Authenticated GET request with valid token.

        Returns:
            Response (JSON):
                - 200 OK:
                    A list of movie progress entries for the current user.
                - 204 No Content:
                    If no progress entries are found or an unexpected error occurs.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)

        Notes:
            - Each progress entry typically includes information such as movie ID and timestamp/position.
            - Consider handling specific exceptions (e.g. database errors) instead of a bare `except` for clearer error diagnostics.
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/movies/:
    get:
      operationId: api_movies_retrieve
      description: |-
        Returns a list of all available movies.

        This endpoint retrieves all movies from the database, ordered by creation date (newest first).
        Authentication is required to access this resource. The response is cached for performance optimization.

        Args:
            request (Request): Authenticated GET request with valid token.

        Returns:
            Response (JSON):
                - 200 OK:
                    A list of movies, each represented as serialized JSON data.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/movies-convert/:
    get:
      operationId: api_movies_convert_retrieve
      description: |-
        Returns a list of all available movie convertables.

        This endpoint retrieves all entries from the MovieConvertables model and returns them as serialized data.
        Each convertable represents a video that has been uploaded and processed using ffmpeg.
        During processing, the original video is converted and stored in multiple resolutions: 120p, 360p, 720p, and 1080p.

        Args:
            request (Request): Authenticated GET request with valid token.

        Returns:
            Response (JSON):
                - 200 OK:
                    A list of movie convertables, each represented as serialized JSON data.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/password-reset/:
    post:
      operationId: api_password_reset_create
      description: |-
        Resets a user's password using a valid reset code.

        This endpoint verifies a password reset code and allows the user to set a new password.
        It ensures all fields are present, validates the reset code, and checks password confirmation before applying changes.

        Args:
            request (Request): POST request with JSON body containing:
                - user_id (int): ID of the user requesting password reset
                - code (int): Password reset code ID
                - password (str): New password
                - repeated_password (str): Confirmation of the new password

        Returns:
            Response (JSON):
                - 200 OK:
                    {
                        "message": "Password reset successful"
                    }
                - 400 Bad Request:
                    If fields are missing:
                    {
                        "error": "All fields are required."
                    }
                    If passwords do not match:
                    {
                        "error": "Passwords do not match."
                    }
                    If reset code or user is invalid:
                    {
                        "error": "Invalid reset code or user."
                    }
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/password-reset-inquiry/:
    post:
      operationId: api_password_reset_inquiry_create
      description: |-
        Initiates a password reset process by sending a reset email to the user.

        This endpoint accepts an email address and, if a matching user is found, generates a password reset code
        and sends an email asynchronously. For security reasons, the response is the same regardless of whether
        the email exists in the system.

        Args:
            request (Request): POST request with JSON body containing:
                - email (str): Email address of the user requesting password reset

        Returns:
            Response (JSON):
                - 200 OK:
                    {
                        "message": "If an account with that email exists, a reset email was sent."
                    }
                - 400 Bad Request:
                    {
                        "error": "Email is required"
                    }
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/register/:
    post:
      operationId: api_register_create
      description: |-
        Registers a new user and initiates the email verification process.

        This endpoint creates a new user account if the submitted data is valid.
        After registration, it generates a verification code and sends it via email asynchronously.

        Args:
            request (Request): POST request with user registration data (defined in RegistrationSerializer).

        Returns:
            Response (JSON):
                - 200 OK:
                    {
                        "message": "verification email was sent"
                    }
                - 400 Bad Request:
                    {
                        "field_name": ["error message"],
                        ...
                    }
                    Returned if the submitted data is invalid, with detailed serializer error messages.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/single-movie-progress/{id}:
    get:
      operationId: api_single_movie_progress_retrieve
      description: |-
        Retrieves the movie watch progress for a specific movie and the authenticated user.

        This endpoint returns the progress entry for the given movie, allowing the user to resume playback
        from their last watched position.

        Args:
            request (Request): Authenticated GET request with valid token.
            pk (int): Primary key (ID) of the movie.

        Returns:
            Response (JSON):
                - 200 OK:
                    A serialized progress entry with the last watched timestamp.
                - 204 No Content:
                    If no progress entry exists for this movie/user combination.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_single_movie_progress_create
      description: |-
        Creates or updates the user's watch progress for a specific movie.

        This endpoint stores the current playback time for a movie, so that the user can resume
        watching later from the same position.

        Args:
            request (Request): Authenticated POST request with JSON body:
                - time (int or float): The current playback position in seconds.
            pk (int): Primary key (ID) of the movie.

        Returns:
            Response:
                - 201 Created:
                    If the progress was successfully created or updated.
                - 400 Bad Request:
                    If the 'time' field is missing or invalid.

        Authentication:
            Required – Token-based authentication

        Permissions:
            Only authenticated users (IsAuthenticated)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/verification/:
    post:
      operationId: api_verification_create
      description: |-
        Verifies a user's email using a verification code.

        This endpoint activates a user account if the provided verification code is valid.
        Once verified, the user is marked as active and the verification code is deleted.

        Args:
            request (Request): POST request with JSON body containing:
                - user_id (int): ID of the user to verify
                - code (int): Verification code ID assigned to the user

        Returns:
            Response (JSON):
                - 200 OK:
                    {
                        "message": "user verified"
                    }
                - 404 Not Found:
                    Returned if the verification code is invalid or does not match the user.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
